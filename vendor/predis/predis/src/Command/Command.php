<?php
 namespace Predis\Command; abstract class Command implements CommandInterface { private $slot; private $arguments = array(); protected function filterArguments(array $arguments) { return $arguments; } public function setArguments(array $arguments) { $this->arguments = $this->filterArguments($arguments); unset($this->slot); } public function setRawArguments(array $arguments) { $this->arguments = $arguments; unset($this->slot); } public function getArguments() { return $this->arguments; } public function getArgument($index) { if (isset($this->arguments[$index])) { return $this->arguments[$index]; } } public function setSlot($slot) { $this->slot = $slot; } public function getSlot() { if (isset($this->slot)) { return $this->slot; } } public function parseResponse($data) { return $data; } public static function normalizeArguments(array $arguments) { if (count($arguments) === 1 && is_array($arguments[0])) { return $arguments[0]; } return $arguments; } public static function normalizeVariadic(array $arguments) { if (count($arguments) === 2 && is_array($arguments[1])) { return array_merge(array($arguments[0]), $arguments[1]); } return $arguments; } } 