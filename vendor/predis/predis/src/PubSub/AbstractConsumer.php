<?php
 namespace Predis\PubSub; abstract class AbstractConsumer implements \Iterator { const SUBSCRIBE = 'subscribe'; const UNSUBSCRIBE = 'unsubscribe'; const PSUBSCRIBE = 'psubscribe'; const PUNSUBSCRIBE = 'punsubscribe'; const MESSAGE = 'message'; const PMESSAGE = 'pmessage'; const PONG = 'pong'; const STATUS_VALID = 1; const STATUS_SUBSCRIBED = 2; const STATUS_PSUBSCRIBED = 4; private $position = null; private $statusFlags = self::STATUS_VALID; public function __destruct() { $this->stop(true); } protected function isFlagSet($value) { return ($this->statusFlags & $value) === $value; } public function subscribe($channel ) { $this->writeRequest(self::SUBSCRIBE, func_get_args()); $this->statusFlags |= self::STATUS_SUBSCRIBED; } public function unsubscribe() { $this->writeRequest(self::UNSUBSCRIBE, func_get_args()); } public function psubscribe($pattern ) { $this->writeRequest(self::PSUBSCRIBE, func_get_args()); $this->statusFlags |= self::STATUS_PSUBSCRIBED; } public function punsubscribe() { $this->writeRequest(self::PUNSUBSCRIBE, func_get_args()); } public function ping($payload = null) { $this->writeRequest('PING', array($payload)); } public function stop($drop = false) { if (!$this->valid()) { return false; } if ($drop) { $this->invalidate(); $this->disconnect(); } else { if ($this->isFlagSet(self::STATUS_SUBSCRIBED)) { $this->unsubscribe(); } if ($this->isFlagSet(self::STATUS_PSUBSCRIBED)) { $this->punsubscribe(); } } return !$drop; } abstract protected function disconnect(); abstract protected function writeRequest($method, $arguments); public function rewind() { } public function current() { return $this->getValue(); } public function key() { return $this->position; } public function next() { if ($this->valid()) { ++$this->position; } return $this->position; } public function valid() { $isValid = $this->isFlagSet(self::STATUS_VALID); $subscriptionFlags = self::STATUS_SUBSCRIBED | self::STATUS_PSUBSCRIBED; $hasSubscriptions = ($this->statusFlags & $subscriptionFlags) > 0; return $isValid && $hasSubscriptions; } protected function invalidate() { $this->statusFlags = 0; } abstract protected function getValue(); } 