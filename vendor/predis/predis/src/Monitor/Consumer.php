<?php
 namespace Predis\Monitor; use Predis\ClientInterface; use Predis\Connection\AggregateConnectionInterface; use Predis\NotSupportedException; class Consumer implements \Iterator { private $client; private $valid; private $position; public function __construct(ClientInterface $client) { $this->assertClient($client); $this->client = $client; $this->start(); } public function __destruct() { $this->stop(); } private function assertClient(ClientInterface $client) { if ($client->getConnection() instanceof AggregateConnectionInterface) { throw new NotSupportedException( 'Cannot initialize a monitor consumer over aggregate connections.' ); } if ($client->getProfile()->supportsCommand('MONITOR') === false) { throw new NotSupportedException("The current profile does not support 'MONITOR'."); } } protected function start() { $this->client->executeCommand( $this->client->createCommand('MONITOR') ); $this->valid = true; } public function stop() { $this->client->disconnect(); $this->valid = false; } public function rewind() { } public function current() { return $this->getValue(); } public function key() { return $this->position; } public function next() { ++$this->position; } public function valid() { return $this->valid; } private function getValue() { $database = 0; $client = null; $event = $this->client->getConnection()->read(); $callback = function ($matches) use (&$database, &$client) { if (2 === $count = count($matches)) { $database = (int) $matches[1]; } if (4 === $count) { $database = (int) $matches[2]; $client = $matches[3]; } return ' '; }; $event = preg_replace_callback('/ \(db (\d+)\) | \[(\d+) (.*?)\] /', $callback, $event, 1); @list($timestamp, $command, $arguments) = explode(' ', $event, 3); return (object) array( 'timestamp' => (float) $timestamp, 'database' => $database, 'client' => $client, 'command' => substr($command, 1, -1), 'arguments' => $arguments, ); } } 