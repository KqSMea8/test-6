<?php
 declare(strict_types=1); namespace voku\helper; class Bootup { public static function filterRequestInputs($normalization_form = 4 , $leading_combining = '◌') { $a = [ &$_FILES, &$_ENV, &$_GET, &$_POST, &$_COOKIE, &$_SERVER, &$_REQUEST, ]; foreach ($a[0] as &$r) { $a[] = [ &$r['name'], &$r['type'], ]; } unset($r, $a[0]); $len = \count($a) + 1; for ($i = 1; $i < $len; ++$i) { foreach ($a[$i] as &$r) { $s = $r; if (\is_array($s)) { $a[$len++] = &$r; } else { $r = self::filterString($s, $normalization_form, $leading_combining); } } unset($r, $a[$i]); } } public static function filterRequestUri($uri = null, $exit = true) { if (null === $uri) { if (!isset($_SERVER['REQUEST_URI'])) { return false; } $uri = (string)$_SERVER['REQUEST_URI']; } $uriOrig = $uri; if (UTF8::is_utf8(\rawurldecode($uri)) === true) { return $uri; } $uri = (string)\preg_replace_callback( '/[\x80-\xFF]+/', function ($m) { return \rawurlencode($m[0]); }, $uri ); $uri = (string)\preg_replace_callback( '/(?:%[89A-F][0-9A-F])+/i', function ($m) { return \rawurlencode(UTF8::rawurldecode($m[0])); }, $uri ); if ( $uri !== $uriOrig && $exit === true && \headers_sent() === false ) { $severProtocol = ($_SERVER['SERVER_PROTOCOL'] ?? 'HTTP/1.1'); \header($severProtocol . ' 301 Moved Permanently'); \header('Location: ' . $uri); exit(); } return $uri; } public static function filterString($input, int $normalization_form = 4 , string $leading_combining = '◌') { return UTF8::filter($input, $normalization_form, $leading_combining); } public static function get_random_bytes($length) { if (!$length) { return false; } $length = (int)$length; if ($length <= 0) { return false; } return \random_bytes($length); } public static function initAll() { \ini_set('default_charset', 'UTF-8'); } public static function is_php($version): bool { static $_IS_PHP; $version = (string)$version; if (!isset($_IS_PHP[$version])) { $_IS_PHP[$version] = \version_compare(PHP_VERSION, $version, '>='); } return $_IS_PHP[$version]; } } 