<?php
 namespace Fideloper\Proxy; use Closure; use Illuminate\Contracts\Config\Repository; class TrustProxies { protected $config; protected $proxies; protected $headers; public function __construct(Repository $config) { $this->config = $config; } public function handle($request, Closure $next) { $this->setTrustedProxyHeaderNames($request); $this->setTrustedProxyIpAddresses($request); return $next($request); } protected function setTrustedProxyIpAddresses($request) { $trustedIps = $this->proxies ?: $this->config->get('trustedproxy.proxies'); if (is_array($trustedIps)) { return $this->setTrustedProxyIpAddressesToSpecificIps($request, $trustedIps); } if ($trustedIps === '*') { return $this->setTrustedProxyIpAddressesToTheCallingIp($request); } if ($trustedIps === '**') { return $this->setTrustedProxyIpAddressesToAllIps($request); } } private function setTrustedProxyIpAddressesToSpecificIps($request, $trustedIps) { $request->setTrustedProxies((array) $trustedIps, $this->getTrustedHeaderSet()); } private function setTrustedProxyIpAddressesToTheCallingIp($request) { $request->setTrustedProxies($request->getClientIps(), $this->getTrustedHeaderSet()); } private function setTrustedProxyIpAddressesToAllIps($request) { $request->setTrustedProxies(['0.0.0.0/0', '2000:0:0:0:0:0:0:0/3'], $this->getTrustedHeaderSet()); } protected function setTrustedProxyHeaderNames($request) { $trustedHeaderNames = $this->getTrustedHeaderNames(); if(!is_array($trustedHeaderNames)) { return; } foreach ($trustedHeaderNames as $headerKey => $headerName) { $request->setTrustedHeaderName($headerKey, $headerName); } } protected function getTrustedHeaderNames() { return $this->headers ?: $this->config->get('trustedproxy.headers'); } protected function getTrustedHeaderSet() { $trustedHeaderNames = $this->getTrustedHeaderNames(); $headerKeys = array_keys($this->getTrustedHeaderNames()); return array_reduce($headerKeys, function ($set, $key) use ($trustedHeaderNames) { if(! is_numeric($key)) { return $set; } if (is_null($trustedHeaderNames[$key])) { return $set; } return $set | $key; }, 0); } } 