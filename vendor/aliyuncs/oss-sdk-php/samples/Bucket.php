<?php
require_once __DIR__ . '/Common.php'; use OSS\OssClient; use OSS\Core\OssException; $ossClient = Common::getOssClient(); if (is_null($ossClient)) exit(1); $bucket = Common::getBucketName(); $ossClient->createBucket($bucket, OssClient::OSS_ACL_TYPE_PUBLIC_READ_WRITE); Common::println("bucket $bucket created"); $doesExist = $ossClient->doesBucketExist($bucket); Common::println("bucket $bucket exist? " . ($doesExist ? "yes" : "no")); $bucketListInfo = $ossClient->listBuckets(); $ossClient->putBucketAcl($bucket, OssClient::OSS_ACL_TYPE_PUBLIC_READ_WRITE); Common::println("bucket $bucket acl put"); $acl = $ossClient->getBucketAcl($bucket); Common::println("bucket $bucket acl get: " . $acl); createBucket($ossClient, $bucket); doesBucketExist($ossClient, $bucket); deleteBucket($ossClient, $bucket); putBucketAcl($ossClient, $bucket); getBucketAcl($ossClient, $bucket); listBuckets($ossClient); function createBucket($ossClient, $bucket) { try { $ossClient->createBucket($bucket, OssClient::OSS_ACL_TYPE_PUBLIC_READ_WRITE); } catch (OssException $e) { printf(__FUNCTION__ . ": FAILED\n"); printf($e->getMessage() . "\n"); return; } print(__FUNCTION__ . ": OK" . "\n"); } function doesBucketExist($ossClient, $bucket) { try { $res = $ossClient->doesBucketExist($bucket); } catch (OssException $e) { printf(__FUNCTION__ . ": FAILED\n"); printf($e->getMessage() . "\n"); return; } if ($res === true) { print(__FUNCTION__ . ": OK" . "\n"); } else { print(__FUNCTION__ . ": FAILED" . "\n"); } } function deleteBucket($ossClient, $bucket) { try { $ossClient->deleteBucket($bucket); } catch (OssException $e) { printf(__FUNCTION__ . ": FAILED\n"); printf($e->getMessage() . "\n"); return; } print(__FUNCTION__ . ": OK" . "\n"); } function putBucketAcl($ossClient, $bucket) { $acl = OssClient::OSS_ACL_TYPE_PRIVATE; try { $ossClient->putBucketAcl($bucket, $acl); } catch (OssException $e) { printf(__FUNCTION__ . ": FAILED\n"); printf($e->getMessage() . "\n"); return; } print(__FUNCTION__ . ": OK" . "\n"); } function getBucketAcl($ossClient, $bucket) { try { $res = $ossClient->getBucketAcl($bucket); } catch (OssException $e) { printf(__FUNCTION__ . ": FAILED\n"); printf($e->getMessage() . "\n"); return; } print(__FUNCTION__ . ": OK" . "\n"); print('acl: ' . $res); } function listBuckets($ossClient) { $bucketList = null; try { $bucketListInfo = $ossClient->listBuckets(); } catch (OssException $e) { printf(__FUNCTION__ . ": FAILED\n"); printf($e->getMessage() . "\n"); return; } print(__FUNCTION__ . ": OK" . "\n"); $bucketList = $bucketListInfo->getBucketList(); foreach ($bucketList as $bucket) { print($bucket->getLocation() . "\t" . $bucket->getName() . "\t" . $bucket->getCreatedate() . "\n"); } } 