<?php
 namespace Hashids; use RuntimeException; class Math { public static function add($a, $b) { if (function_exists('gmp_add')) { return gmp_add($a, $b); } if (function_exists('bcadd')) { return bcadd($a, $b, 0); } throw new RuntimeException('Missing BC Math or GMP extension.'); } public static function multiply($a, $b) { if (function_exists('gmp_mul')) { return gmp_mul($a, $b); } if (function_exists('bcmul')) { return bcmul($a, $b, 0); } throw new RuntimeException('Missing BC Math or GMP extension.'); } public static function divide($a, $b) { if (function_exists('gmp_div_q')) { return gmp_div_q($a, $b); } if (function_exists('bcdiv')) { return bcdiv($a, $b, 0); } throw new RuntimeException('Missing BC Math or GMP extension.'); } public static function mod($n, $d) { if (function_exists('gmp_mod')) { return gmp_mod($n, $d); } if (function_exists('bcmod')) { return bcmod($n, $d); } throw new RuntimeException('Missing BC Math or GMP extension.'); } public static function greaterThan($a, $b) { if (function_exists('gmp_cmp')) { return gmp_cmp($a, $b) > 0; } if (function_exists('bccomp')) { return bccomp($a, $b, 0) > 0; } throw new RuntimeException('Missing BC Math or GMP extension.'); } public static function intval($a) { if (function_exists('gmp_intval')) { return gmp_intval($a); } return intval($a); } public static function strval($a) { if (function_exists('gmp_strval')) { return gmp_strval($a); } return $a; } public static function get($a) { if (function_exists('gmp_init')) { return gmp_init($a); } return $a; } } 