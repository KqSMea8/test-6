<?php namespace zgldh\QiniuStorage; class QiniuStorage { private $storage = null; private static $instance = []; public static function disk($name) { if (!isset(self::$instance[$name])) { self::$instance[$name] = new self($name); } return self::$instance[$name]; } private function __construct($name) { $this->storage = \Storage::disk($name); } public function exists($key) { return $this->storage->exists($key); } public function get($key) { return $this->storage->get($key); } public function put($key, $contents) { return $this->storage->put($key, $contents); } public function prepend($key, $contents) { return $this->storage->prepend($key, $contents); } public function append($key, $contents) { return $this->storage->append($key, $contents); } public function delete($key) { return $this->storage->delete($key); } public function copy($key, $key2) { return $this->storage->copy($key, $key2); } public function move($key, $key2) { return $this->storage->move($key, $key2); } public function size($key) { return $this->storage->size($key); } public function lastModified($key) { return $this->storage->lastModified($key); } public function files($key) { return $this->storage->files($key); } public function allFiles($key) { return $this->storage->files($key); } public function directories($key) { return $this->storage->files($key); } public function allDirectories($key) { return $this->storage->files($key); } public function makeDirectory($key) { return $this->storage->makeDirectory($key); } public function deleteDirectory($key) { return $this->storage->deleteDirectory($key); } public function uploadToken($key = null, $expires = 3600, $policy = null, $strictPolicy = true) { return $this->storage->getDriver()->uploadToken($key, $expires, $policy, $strictPolicy); } public function withUploadToken($token) { $this->storage->getDriver()->withUploadToken($token); } public function downloadUrl($key, $domainType = 'default') { return $this->storage->getDriver()->downloadUrl($key, $domainType); } public function privateDownloadUrl($key, $domainType = 'default') { return $this->storage->getDriver()->privateDownloadUrl($key, $domainType); } public function avInfo($key) { return $this->storage->getDriver()->avInfo($key); } public function imageInfo($key) { return $this->storage->getDriver()->imageInfo($key); } public function imageExif($key) { return $this->storage->getDriver()->imageExif($key); } public function imagePreviewUrl($key, $opts) { return $this->storage->getDriver()->imagePreviewUrl($key, $opts); } public function privateImagePreviewUrl($key, $opts) { return $this->storage->getDriver()->privateImagePreviewUrl($key, $opts); } public function persistentFop($key, $opts, $pipline = null, $force = false, $notify_url = null) { return $this->storage->getDriver()->persistentFop($key, $opts, $pipline, $force, $notify_url); } public function persistentStatus($id) { return $this->storage->getDriver()->persistentStatus($id); } public function verifyCallback($contentType, $originAuthorization, $url, $body) { return $this->storage->getDriver()->verifyCallback($contentType, $originAuthorization, $url, $body); } public function fetch($url, $key) { return $this->storage->getDriver()->fetch($url, $key); } public function qetag() { return $this->storage->getDriver()->qetag(); } public function lastReturn() { return $this->storage->getDriver()->getLastReturn(); } } 