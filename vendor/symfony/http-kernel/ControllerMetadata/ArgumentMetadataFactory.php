<?php
 namespace Symfony\Component\HttpKernel\ControllerMetadata; final class ArgumentMetadataFactory implements ArgumentMetadataFactoryInterface { private $supportsVariadic; private $supportsParameterType; public function __construct() { $this->supportsVariadic = method_exists('ReflectionParameter', 'isVariadic'); $this->supportsParameterType = method_exists('ReflectionParameter', 'getType'); } public function createArgumentMetadata($controller) { $arguments = array(); if (\is_array($controller)) { $reflection = new \ReflectionMethod($controller[0], $controller[1]); } elseif (\is_object($controller) && !$controller instanceof \Closure) { $reflection = (new \ReflectionObject($controller))->getMethod('__invoke'); } else { $reflection = new \ReflectionFunction($controller); } foreach ($reflection->getParameters() as $param) { $arguments[] = new ArgumentMetadata($param->getName(), $this->getType($param, $reflection), $this->isVariadic($param), $this->hasDefaultValue($param), $this->getDefaultValue($param), $param->allowsNull()); } return $arguments; } private function isVariadic(\ReflectionParameter $parameter) { return $this->supportsVariadic && $parameter->isVariadic(); } private function hasDefaultValue(\ReflectionParameter $parameter) { return $parameter->isDefaultValueAvailable(); } private function getDefaultValue(\ReflectionParameter $parameter) { return $this->hasDefaultValue($parameter) ? $parameter->getDefaultValue() : null; } private function getType(\ReflectionParameter $parameter, \ReflectionFunctionAbstract $function) { if ($this->supportsParameterType) { if (!$type = $parameter->getType()) { return; } $name = $type instanceof \ReflectionNamedType ? $type->getName() : $type->__toString(); if ('array' === $name && !$type->isBuiltin()) { return; } } elseif (preg_match('/^(?:[^ ]++ ){4}([a-zA-Z_\x7F-\xFF][^ ]++)/', $parameter, $name)) { $name = $name[1]; } else { return; } $lcName = strtolower($name); if ('self' !== $lcName && 'parent' !== $lcName) { return $name; } if (!$function instanceof \ReflectionMethod) { return; } if ('self' === $lcName) { return $function->getDeclaringClass()->name; } if ($parent = $function->getDeclaringClass()->getParentClass()) { return $parent->name; } } } 