<?php
namespace Qiniu\Processing; use Qiniu\Config; use Qiniu\Http\Client; use Qiniu\Http\Error; use Qiniu\Processing\Operation; final class PersistentFop { private $auth; private $config; public function __construct($auth, $config = null) { $this->auth = $auth; if ($config == null) { $this->config = new Config(); } else { $this->config = $config; } } public function execute($bucket, $key, $fops, $pipeline = null, $notify_url = null, $force = false) { if (is_array($fops)) { $fops = implode(';', $fops); } $params = array('bucket' => $bucket, 'key' => $key, 'fops' => $fops); \Qiniu\setWithoutEmpty($params, 'pipeline', $pipeline); \Qiniu\setWithoutEmpty($params, 'notifyURL', $notify_url); if ($force) { $params['force'] = 1; } $data = http_build_query($params); $scheme = "http://"; if ($this->config->useHTTPS === true) { $scheme = "https://"; } $url = $scheme . Config::API_HOST . '/pfop/'; $headers = $this->auth->authorization($url, $data, 'application/x-www-form-urlencoded'); $headers['Content-Type'] = 'application/x-www-form-urlencoded'; $response = Client::post($url, $data, $headers); if (!$response->ok()) { return array(null, new Error($url, $response)); } $r = $response->json(); $id = $r['persistentId']; return array($id, null); } public function status($id) { $scheme = "http://"; if ($this->config->useHTTPS === true) { $scheme = "https://"; } $url = $scheme . Config::API_HOST . "/status/get/prefop?id=$id"; $response = Client::get($url); if (!$response->ok()) { return array(null, new Error($url, $response)); } return array($response->json(), null); } } 