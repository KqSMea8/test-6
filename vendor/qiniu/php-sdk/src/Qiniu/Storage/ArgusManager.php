<?php
namespace Qiniu\Storage; use Qiniu\Auth; use Qiniu\Config; use Qiniu\Zone; use Qiniu\Http\Client; use Qiniu\Http\Error; final class ArgusManager { private $auth; private $config; public function __construct(Auth $auth, Config $config = null) { $this->auth = $auth; if ($config == null) { $this->config = new Config(); } else { $this->config = $config; } } public function pulpVideo($body, $vid) { $path = '/v1/video/' . $vid; return $this->arPost($path, $body); } private function getArHost() { $scheme = "http://"; if ($this->config->useHTTPS == true) { $scheme = "https://"; } return $scheme . Config::ARGUS_HOST; } private function arPost($path, $body = null) { $url = $this->getArHost() . $path; return $this->post($url, $body); } private function post($url, $body) { $headers = $this->auth->authorizationV2($url, 'POST', $body, 'application/json'); $headers['Content-Type']='application/json'; $ret = Client::post($url, $body, $headers); if (!$ret->ok()) { print($ret->statusCode); return array(null, new Error($url, $ret)); } $r = ($ret->body === null) ? array() : $ret->json(); return array($r, null); } } 