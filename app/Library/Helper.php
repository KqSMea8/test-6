<?php
namespace App\Library; use Hashids\Hashids; class Helper { public static function getMysqlDate($sp9564d7 = 0) { return date('Y-m-d', time() + $sp9564d7 * 24 * 3600); } public static function getIP() { if (isset($_SERVER)) { if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) { $sp891b96 = $_SERVER['HTTP_X_FORWARDED_FOR']; } else { if (isset($_SERVER['HTTP_CLIENT_IP'])) { $sp891b96 = $_SERVER['HTTP_CLIENT_IP']; } else { $sp891b96 = @$_SERVER['REMOTE_ADDR']; } } } else { if (getenv('HTTP_X_FORWARDED_FOR')) { $sp891b96 = getenv('HTTP_X_FORWARDED_FOR'); } else { if (getenv('HTTP_CLIENT_IP')) { $sp891b96 = getenv('HTTP_CLIENT_IP'); } else { $sp891b96 = getenv('REMOTE_ADDR'); } } } if (strpos($sp891b96, ',') !== FALSE) { $spda9cae = explode(',', $sp891b96); return $spda9cae[0]; } return $sp891b96; } public static function getClientIP() { if (isset($_SERVER)) { $sp891b96 = $_SERVER['REMOTE_ADDR']; } else { $sp891b96 = getenv('REMOTE_ADDR'); } if (strpos($sp891b96, ',') !== FALSE) { $spda9cae = explode(',', $sp891b96); return $spda9cae[0]; } return $sp891b96; } public static function filterWords($spf2d586, $sp62a480) { if (!$spf2d586) { return false; } if (!is_array($sp62a480)) { $sp62a480 = explode('|', $sp62a480); } foreach ($sp62a480 as $sp871a5b) { if ($sp871a5b && strpos($spf2d586, $sp871a5b) !== FALSE) { return $sp871a5b; } } return false; } public static function is_idcard($sp7ce313) { if (strlen($sp7ce313) == 18) { return self::idcard_checksum18($sp7ce313); } elseif (strlen($sp7ce313) == 15) { $sp7ce313 = self::idcard_15to18($sp7ce313); return self::idcard_checksum18($sp7ce313); } else { return false; } } private static function idcard_verify_number($spce7341) { if (strlen($spce7341) != 17) { return false; } $spc4ada2 = array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2); $sp654fd4 = array('1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'); $sp1ad08c = 0; for ($sp3deb2c = 0; $sp3deb2c < strlen($spce7341); $sp3deb2c++) { $sp1ad08c += substr($spce7341, $sp3deb2c, 1) * $spc4ada2[$sp3deb2c]; } $sp787b21 = $sp1ad08c % 11; $sp4b4f9b = $sp654fd4[$sp787b21]; return $sp4b4f9b; } private static function idcard_15to18($sp67fdb2) { if (strlen($sp67fdb2) != 15) { return false; } else { if (array_search(substr($sp67fdb2, 12, 3), array('996', '997', '998', '999')) !== false) { $sp67fdb2 = substr($sp67fdb2, 0, 6) . '18' . substr($sp67fdb2, 6, 9); } else { $sp67fdb2 = substr($sp67fdb2, 0, 6) . '19' . substr($sp67fdb2, 6, 9); } } $sp67fdb2 = $sp67fdb2 . self::idcard_verify_number($sp67fdb2); return $sp67fdb2; } private static function idcard_checksum18($sp67fdb2) { if (strlen($sp67fdb2) != 18) { return false; } $spce7341 = substr($sp67fdb2, 0, 17); if (self::idcard_verify_number($spce7341) != strtoupper(substr($sp67fdb2, 17, 1))) { return false; } else { return true; } } public static function str_between($spf2d586, $sp7f5952, $spdeaedc) { $sp19a9aa = strpos($spf2d586, $sp7f5952); if ($sp19a9aa === false) { return ''; } $sp9c71e0 = strpos($spf2d586, $spdeaedc, $sp19a9aa + strlen($sp7f5952)); if ($sp9c71e0 === false || $sp19a9aa >= $sp9c71e0) { return ''; } $sp20213c = strlen($sp7f5952); $sp7210a9 = substr($spf2d586, $sp19a9aa + $sp20213c, $sp9c71e0 - $sp19a9aa - $sp20213c); return $sp7210a9; } public static function str_between_longest($spf2d586, $sp7f5952, $spdeaedc) { $sp19a9aa = strpos($spf2d586, $sp7f5952); if ($sp19a9aa === false) { return ''; } $sp9c71e0 = strrpos($spf2d586, $spdeaedc, $sp19a9aa + strlen($sp7f5952)); if ($sp9c71e0 === false || $sp19a9aa >= $sp9c71e0) { return ''; } $sp20213c = strlen($sp7f5952); $sp7210a9 = substr($spf2d586, $sp19a9aa + $sp20213c, $sp9c71e0 - $sp19a9aa - $sp20213c); return $sp7210a9; } public static function format_url($spaf19c1) { if (!starts_with($spaf19c1, 'http://') && !starts_with($spaf19c1, 'https://')) { $spaf19c1 = 'http://' . $spaf19c1; } while (ends_with($spaf19c1, '/')) { $spaf19c1 = substr($spaf19c1, 0, -1); } return $spaf19c1; } public static function lite_hash($spf2d586) { $sp174f27 = crc32((string) $spf2d586); if ($sp174f27 < 0) { $sp174f27 &= 1 << 7; } return $sp174f27; } const ID_TYPE_USER = 0; const ID_TYPE_CATEGORY = 1; const ID_TYPE_PRODUCT = 2; public static function id_encode($spae6a5b, $sp9265a0) { $sp46afdb = new Hashids(config('app.key'), 8, 'abcdefghijklmnopqrstuvwxyz1234567890'); return @$sp46afdb->encode(self::lite_hash($spae6a5b), $spae6a5b, self::lite_hash($sp9265a0), $sp9265a0); } public static function id_decode($spbd55ca, $sp9265a0) { if (strlen($spbd55ca) < 8) { $sp46afdb = new Hashids(config('app.key')); if ($sp9265a0 === self::ID_TYPE_USER) { return intval(@$sp46afdb->decodeHex($spbd55ca)); } else { return intval(@$sp46afdb->decode($spbd55ca)[0]); } } $sp46afdb = new Hashids(config('app.key'), 8, 'abcdefghijklmnopqrstuvwxyz1234567890'); return intval(@$sp46afdb->decode($spbd55ca)[1]); } }