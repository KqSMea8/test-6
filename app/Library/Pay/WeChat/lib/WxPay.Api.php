<?php
require_once 'WxPay.Exception.php'; require_once 'WxPay.Config.php'; require_once 'WxPay.Data.php'; class WxPayApi { public static function unifiedOrder($spca1f8a, $sp1e8375 = 6) { $spaf19c1 = 'https://api.mch.weixin.qq.com/pay/unifiedorder'; if (!$spca1f8a->IsOut_trade_noSet()) { throw new WxPayException('缺少统一支付接口必填参数out_trade_no！'); } else { if (!$spca1f8a->IsBodySet()) { throw new WxPayException('缺少统一支付接口必填参数body！'); } else { if (!$spca1f8a->IsTotal_feeSet()) { throw new WxPayException('缺少统一支付接口必填参数total_fee！'); } else { if (!$spca1f8a->IsTrade_typeSet()) { throw new WxPayException('缺少统一支付接口必填参数trade_type！'); } } } } if ($spca1f8a->GetTrade_type() == 'JSAPI' && !$spca1f8a->IsOpenidSet()) { throw new WxPayException('统一支付接口中，缺少必填参数openid！trade_type为JSAPI时，openid为必填参数！'); } if ($spca1f8a->GetTrade_type() == 'NATIVE' && !$spca1f8a->IsProduct_idSet()) { throw new WxPayException('统一支付接口中，缺少必填参数product_id！trade_type为JSAPI时，product_id为必填参数！'); } if (!$spca1f8a->IsNotify_urlSet()) { $spca1f8a->SetNotify_url(WxPayConfig::NOTIFY_URL); } $spca1f8a->SetAppid(WxPayConfig::APPID); $spca1f8a->SetMch_id(WxPayConfig::MCHID); $spca1f8a->SetNonce_str(self::getNonceStr()); $spca1f8a->SetSign(); $sp3e8e0b = $spca1f8a->ToXml(); $sp8ea0c0 = self::getMillisecond(); $spf1d2fd = self::postXmlCurl($sp3e8e0b, $spaf19c1, false, $sp1e8375); $sp594fbb = WxPayResults::Init($spf1d2fd); self::reportCostTime($spaf19c1, $sp8ea0c0, $sp594fbb); return $sp594fbb; } public static function orderQuery($spca1f8a, $sp1e8375 = 6) { $spaf19c1 = 'https://api.mch.weixin.qq.com/pay/orderquery'; if (!$spca1f8a->IsOut_trade_noSet() && !$spca1f8a->IsTransaction_idSet()) { throw new WxPayException('订单查询接口中，out_trade_no、transaction_id至少填一个！'); } $spca1f8a->SetAppid(WxPayConfig::APPID); $spca1f8a->SetMch_id(WxPayConfig::MCHID); $spca1f8a->SetNonce_str(self::getNonceStr()); $spca1f8a->SetSign(); $sp3e8e0b = $spca1f8a->ToXml(); $sp8ea0c0 = self::getMillisecond(); $spf1d2fd = self::postXmlCurl($sp3e8e0b, $spaf19c1, false, $sp1e8375); $sp594fbb = WxPayResults::Init($spf1d2fd); self::reportCostTime($spaf19c1, $sp8ea0c0, $sp594fbb); return $sp594fbb; } public static function closeOrder($spca1f8a, $sp1e8375 = 6) { $spaf19c1 = 'https://api.mch.weixin.qq.com/pay/closeorder'; if (!$spca1f8a->IsOut_trade_noSet()) { throw new WxPayException('订单查询接口中，out_trade_no必填！'); } $spca1f8a->SetAppid(WxPayConfig::APPID); $spca1f8a->SetMch_id(WxPayConfig::MCHID); $spca1f8a->SetNonce_str(self::getNonceStr()); $spca1f8a->SetSign(); $sp3e8e0b = $spca1f8a->ToXml(); $sp8ea0c0 = self::getMillisecond(); $spf1d2fd = self::postXmlCurl($sp3e8e0b, $spaf19c1, false, $sp1e8375); $sp594fbb = WxPayResults::Init($spf1d2fd); self::reportCostTime($spaf19c1, $sp8ea0c0, $sp594fbb); return $sp594fbb; } public static function refund($spca1f8a, $sp1e8375 = 6) { $spaf19c1 = 'https://api.mch.weixin.qq.com/secapi/pay/refund'; if (!$spca1f8a->IsOut_trade_noSet() && !$spca1f8a->IsTransaction_idSet()) { throw new WxPayException('退款申请接口中，out_trade_no、transaction_id至少填一个！'); } else { if (!$spca1f8a->IsOut_refund_noSet()) { throw new WxPayException('退款申请接口中，缺少必填参数out_refund_no！'); } else { if (!$spca1f8a->IsTotal_feeSet()) { throw new WxPayException('退款申请接口中，缺少必填参数total_fee！'); } else { if (!$spca1f8a->IsRefund_feeSet()) { throw new WxPayException('退款申请接口中，缺少必填参数refund_fee！'); } else { if (!$spca1f8a->IsOp_user_idSet()) { throw new WxPayException('退款申请接口中，缺少必填参数op_user_id！'); } } } } } $spca1f8a->SetAppid(WxPayConfig::APPID); $spca1f8a->SetMch_id(WxPayConfig::MCHID); $spca1f8a->SetNonce_str(self::getNonceStr()); $spca1f8a->SetSign(); $sp3e8e0b = $spca1f8a->ToXml(); $sp8ea0c0 = self::getMillisecond(); $spf1d2fd = self::postXmlCurl($sp3e8e0b, $spaf19c1, true, $sp1e8375); $sp594fbb = WxPayResults::Init($spf1d2fd); self::reportCostTime($spaf19c1, $sp8ea0c0, $sp594fbb); return $sp594fbb; } public static function refundQuery($spca1f8a, $sp1e8375 = 6) { $spaf19c1 = 'https://api.mch.weixin.qq.com/pay/refundquery'; if (!$spca1f8a->IsOut_refund_noSet() && !$spca1f8a->IsOut_trade_noSet() && !$spca1f8a->IsTransaction_idSet() && !$spca1f8a->IsRefund_idSet()) { throw new WxPayException('退款查询接口中，out_refund_no、out_trade_no、transaction_id、refund_id四个参数必填一个！'); } $spca1f8a->SetAppid(WxPayConfig::APPID); $spca1f8a->SetMch_id(WxPayConfig::MCHID); $spca1f8a->SetNonce_str(self::getNonceStr()); $spca1f8a->SetSign(); $sp3e8e0b = $spca1f8a->ToXml(); $sp8ea0c0 = self::getMillisecond(); $spf1d2fd = self::postXmlCurl($sp3e8e0b, $spaf19c1, false, $sp1e8375); $sp594fbb = WxPayResults::Init($spf1d2fd); self::reportCostTime($spaf19c1, $sp8ea0c0, $sp594fbb); return $sp594fbb; } public static function downloadBill($spca1f8a, $sp1e8375 = 6) { $spaf19c1 = 'https://api.mch.weixin.qq.com/pay/downloadbill'; if (!$spca1f8a->IsBill_dateSet()) { throw new WxPayException('对账单接口中，缺少必填参数bill_date！'); } $spca1f8a->SetAppid(WxPayConfig::APPID); $spca1f8a->SetMch_id(WxPayConfig::MCHID); $spca1f8a->SetNonce_str(self::getNonceStr()); $spca1f8a->SetSign(); $sp3e8e0b = $spca1f8a->ToXml(); $spf1d2fd = self::postXmlCurl($sp3e8e0b, $spaf19c1, false, $sp1e8375); if (substr($spf1d2fd, 0, 5) == '<xml>') { return ''; } return $spf1d2fd; } public static function micropay($spca1f8a, $sp1e8375 = 10) { $spaf19c1 = 'https://api.mch.weixin.qq.com/pay/micropay'; if (!$spca1f8a->IsBodySet()) { throw new WxPayException('提交被扫支付API接口中，缺少必填参数body！'); } else { if (!$spca1f8a->IsOut_trade_noSet()) { throw new WxPayException('提交被扫支付API接口中，缺少必填参数out_trade_no！'); } else { if (!$spca1f8a->IsTotal_feeSet()) { throw new WxPayException('提交被扫支付API接口中，缺少必填参数total_fee！'); } else { if (!$spca1f8a->IsAuth_codeSet()) { throw new WxPayException('提交被扫支付API接口中，缺少必填参数auth_code！'); } } } } $spca1f8a->SetSpbill_create_ip($_SERVER['REMOTE_ADDR']); $spca1f8a->SetAppid(WxPayConfig::APPID); $spca1f8a->SetMch_id(WxPayConfig::MCHID); $spca1f8a->SetNonce_str(self::getNonceStr()); $spca1f8a->SetSign(); $sp3e8e0b = $spca1f8a->ToXml(); $sp8ea0c0 = self::getMillisecond(); $spf1d2fd = self::postXmlCurl($sp3e8e0b, $spaf19c1, false, $sp1e8375); $sp594fbb = WxPayResults::Init($spf1d2fd); self::reportCostTime($spaf19c1, $sp8ea0c0, $sp594fbb); return $sp594fbb; } public static function reverse($spca1f8a, $sp1e8375 = 6) { $spaf19c1 = 'https://api.mch.weixin.qq.com/secapi/pay/reverse'; if (!$spca1f8a->IsOut_trade_noSet() && !$spca1f8a->IsTransaction_idSet()) { throw new WxPayException('撤销订单API接口中，参数out_trade_no和transaction_id必须填写一个！'); } $spca1f8a->SetAppid(WxPayConfig::APPID); $spca1f8a->SetMch_id(WxPayConfig::MCHID); $spca1f8a->SetNonce_str(self::getNonceStr()); $spca1f8a->SetSign(); $sp3e8e0b = $spca1f8a->ToXml(); $sp8ea0c0 = self::getMillisecond(); $spf1d2fd = self::postXmlCurl($sp3e8e0b, $spaf19c1, true, $sp1e8375); $sp594fbb = WxPayResults::Init($spf1d2fd); self::reportCostTime($spaf19c1, $sp8ea0c0, $sp594fbb); return $sp594fbb; } public static function report($spca1f8a, $sp1e8375 = 1) { $spaf19c1 = 'https://api.mch.weixin.qq.com/payitil/report'; if (!$spca1f8a->IsInterface_urlSet()) { throw new WxPayException('接口URL，缺少必填参数interface_url！'); } if (!$spca1f8a->IsReturn_codeSet()) { throw new WxPayException('返回状态码，缺少必填参数return_code！'); } if (!$spca1f8a->IsResult_codeSet()) { throw new WxPayException('业务结果，缺少必填参数result_code！'); } if (!$spca1f8a->IsUser_ipSet()) { throw new WxPayException('访问接口IP，缺少必填参数user_ip！'); } if (!$spca1f8a->IsExecute_time_Set()) { throw new WxPayException('接口耗时，缺少必填参数execute_time_！'); } $spca1f8a->SetAppid(WxPayConfig::APPID); $spca1f8a->SetMch_id(WxPayConfig::MCHID); $spca1f8a->SetUser_ip($_SERVER['REMOTE_ADDR']); $spca1f8a->SetTime(date('YmdHis')); $spca1f8a->SetNonce_str(self::getNonceStr()); $spca1f8a->SetSign(); $sp3e8e0b = $spca1f8a->ToXml(); $sp8ea0c0 = self::getMillisecond(); $spf1d2fd = self::postXmlCurl($sp3e8e0b, $spaf19c1, false, $sp1e8375); return $spf1d2fd; } public static function bizpayurl($spca1f8a, $sp1e8375 = 6) { if (!$spca1f8a->IsProduct_idSet()) { throw new WxPayException('生成二维码，缺少必填参数product_id！'); } $spca1f8a->SetAppid(WxPayConfig::APPID); $spca1f8a->SetMch_id(WxPayConfig::MCHID); $spca1f8a->SetTime_stamp(time()); $spca1f8a->SetNonce_str(self::getNonceStr()); $spca1f8a->SetSign(); return $spca1f8a->GetValues(); } public static function shorturl($spca1f8a, $sp1e8375 = 6) { $spaf19c1 = 'https://api.mch.weixin.qq.com/tools/shorturl'; if (!$spca1f8a->IsLong_urlSet()) { throw new WxPayException('需要转换的URL，签名用原串，传输需URL encode！'); } $spca1f8a->SetAppid(WxPayConfig::APPID); $spca1f8a->SetMch_id(WxPayConfig::MCHID); $spca1f8a->SetNonce_str(self::getNonceStr()); $spca1f8a->SetSign(); $sp3e8e0b = $spca1f8a->ToXml(); $sp8ea0c0 = self::getMillisecond(); $spf1d2fd = self::postXmlCurl($sp3e8e0b, $spaf19c1, false, $sp1e8375); $sp594fbb = WxPayResults::Init($spf1d2fd); self::reportCostTime($spaf19c1, $sp8ea0c0, $sp594fbb); return $sp594fbb; } public static function notify($spf9eff8, &$sp32b59e) { $sp3e8e0b = file_get_contents('php://input'); try { $sp594fbb = WxPayResults::Init($sp3e8e0b); } catch (WxPayException $spa9e936) { $sp32b59e = $spa9e936->errorMessage(); return false; } return call_user_func($spf9eff8, $sp594fbb); } public static function getNonceStr($sp46bdd0 = 32) { $spa51e6e = 'abcdefghijklmnopqrstuvwxyz0123456789'; $spf2d586 = ''; for ($sp3deb2c = 0; $sp3deb2c < $sp46bdd0; $sp3deb2c++) { $spf2d586 .= substr($spa51e6e, mt_rand(0, strlen($spa51e6e) - 1), 1); } return $spf2d586; } public static function replyNotify($sp3e8e0b) { echo $sp3e8e0b; } private static function reportCostTime($spaf19c1, $sp8ea0c0, $sp631d11) { if (WxPayConfig::REPORT_LEVENL == 0) { return; } if (WxPayConfig::REPORT_LEVENL == 1 && array_key_exists('return_code', $sp631d11) && $sp631d11['return_code'] == 'SUCCESS' && array_key_exists('result_code', $sp631d11) && $sp631d11['result_code'] == 'SUCCESS') { return; } $sp4e488a = self::getMillisecond(); $sp8485e4 = new WxPayReport(); $sp8485e4->SetInterface_url($spaf19c1); $sp8485e4->SetExecute_time_($sp4e488a - $sp8ea0c0); if (array_key_exists('return_code', $sp631d11)) { $sp8485e4->SetReturn_code($sp631d11['return_code']); } if (array_key_exists('return_msg', $sp631d11)) { $sp8485e4->SetReturn_msg($sp631d11['return_msg']); } if (array_key_exists('result_code', $sp631d11)) { $sp8485e4->SetResult_code($sp631d11['result_code']); } if (array_key_exists('err_code', $sp631d11)) { $sp8485e4->SetErr_code($sp631d11['err_code']); } if (array_key_exists('err_code_des', $sp631d11)) { $sp8485e4->SetErr_code_des($sp631d11['err_code_des']); } if (array_key_exists('out_trade_no', $sp631d11)) { $sp8485e4->SetOut_trade_no($sp631d11['out_trade_no']); } if (array_key_exists('device_info', $sp631d11)) { $sp8485e4->SetDevice_info($sp631d11['device_info']); } try { self::report($sp8485e4); } catch (WxPayException $spa9e936) { } } private static function postXmlCurl($sp3e8e0b, $spaf19c1, $spb23ce5 = false, $spc41eaf = 30) { $sp03f466 = curl_init(); curl_setopt($sp03f466, CURLOPT_TIMEOUT, $spc41eaf); if (WxPayConfig::CURL_PROXY_HOST != '0.0.0.0' && WxPayConfig::CURL_PROXY_PORT != 0) { curl_setopt($sp03f466, CURLOPT_PROXY, WxPayConfig::CURL_PROXY_HOST); curl_setopt($sp03f466, CURLOPT_PROXYPORT, WxPayConfig::CURL_PROXY_PORT); } curl_setopt($sp03f466, CURLOPT_URL, $spaf19c1); curl_setopt($sp03f466, CURLOPT_SSL_VERIFYPEER, TRUE); curl_setopt($sp03f466, CURLOPT_SSL_VERIFYHOST, 2); curl_setopt($sp03f466, CURLOPT_HEADER, FALSE); curl_setopt($sp03f466, CURLOPT_RETURNTRANSFER, TRUE); if ($spb23ce5 == true) { curl_setopt($sp03f466, CURLOPT_SSLCERTTYPE, 'PEM'); curl_setopt($sp03f466, CURLOPT_SSLCERT, WxPayConfig::SSLCERT_PATH); curl_setopt($sp03f466, CURLOPT_SSLKEYTYPE, 'PEM'); curl_setopt($sp03f466, CURLOPT_SSLKEY, WxPayConfig::SSLKEY_PATH); } else { curl_setopt($sp03f466, CURLOPT_SSL_VERIFYPEER, false); } curl_setopt($sp03f466, CURLOPT_POST, TRUE); curl_setopt($sp03f466, CURLOPT_POSTFIELDS, $sp3e8e0b); $sp631d11 = curl_exec($sp03f466); if ($sp631d11) { curl_close($sp03f466); return $sp631d11; } else { $sp178939 = curl_errno($sp03f466); \Log::error('WxPat.Api.postXmlCurl Error: ' . curl_error($sp03f466)); curl_close($sp03f466); throw new WxPayException("curl出错，错误码: {$sp178939}"); } } private static function getMillisecond() { $sp0df43e = explode(' ', microtime()); $sp0df43e = $sp0df43e[1] . $sp0df43e[0] * 1000; $spbd552c = explode('.', $sp0df43e); $sp0df43e = $spbd552c[0]; return $sp0df43e; } }