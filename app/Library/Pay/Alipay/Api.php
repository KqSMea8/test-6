<?php
namespace App\Library\Pay\Alipay; use App\Library\Pay\ApiInterface; class Api implements ApiInterface { private $url_notify = ''; private $url_return = ''; private $pay_id; public function __construct($spae6a5b) { $this->url_notify = SYS_URL_API . '/pay/notify/' . $spae6a5b; $this->url_return = SYS_URL . '/pay/return/' . $spae6a5b; $this->pay_id = $spae6a5b; } function goPay($sp42f333, $sp79d97c, $spf49dcd, $spa1a573, $sp39c1e2) { $spda7912 = sprintf('%.2f', $sp39c1e2 / 100); $spcef7af = $this->buildAliConfig($sp42f333); require_once __DIR__ . '/lib/alipay_submit.class.php'; $spcef7af['notify_url'] = $this->url_notify; $spcef7af['return_url'] = $this->url_return . '/' . $sp79d97c; $spfcb594 = array('service' => $spcef7af['service'], 'partner' => $spcef7af['partner'], 'seller_id' => $spcef7af['seller_id'], 'payment_type' => $spcef7af['payment_type'], 'notify_url' => $spcef7af['notify_url'], 'return_url' => $spcef7af['return_url'], 'out_trade_no' => $sp79d97c, 'total_fee' => $spda7912, 'subject' => $spf49dcd, 'body' => $spa1a573, '_input_charset' => 'utf-8', 'anti_phishing_key' => $spcef7af['anti_phishing_key'], 'exter_invoke_ip' => $spcef7af['exter_invoke_ip']); $spfeadd4 = new \AlipaySubmit($spcef7af); $sp8d2b8d = $spfeadd4->buildRequestForm($spfcb594, 'get', '确认'); echo '<!DOCTYPE html><html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>正在跳转到支付渠道...</title></head><body><h1 style="text-align: center">正在跳转到支付渠道...</h1>'; echo $sp8d2b8d; } function verify($sp42f333, $sp7b72fc) { $spf1c6fe = isset($sp42f333['isNotify']) && $sp42f333['isNotify']; $spcef7af = $this->buildAliConfig($sp42f333); require __DIR__ . '/lib/alipay_notify.class.php'; $spc597dc = new \AlipayNotify($spcef7af); if ($spf1c6fe) { $sp594fbb = $spc597dc->verifyNotify(); } else { $sp594fbb = $spc597dc->verifyReturn(); } if ($sp594fbb) { $sp79d97c = $_REQUEST['out_trade_no']; $sp649e9d = $_REQUEST['trade_no']; $sp0368b9 = $_REQUEST['trade_status']; $sp1ae8d8 = (int) ($_REQUEST['total_fee'] * 100); if ($sp0368b9 == 'TRADE_FINISHED' || $sp0368b9 == 'TRADE_SUCCESS') { $sp7b72fc($sp79d97c, $sp1ae8d8, $sp649e9d); } if ($spf1c6fe) { echo 'success'; } return true; } else { if ($spf1c6fe) { echo 'fail'; $sp8e7138 = 'payNotify pay_id: ' . $this->pay_id . ',Alipay'; } else { $sp8e7138 = 'payReturn pay_id: ' . $this->pay_id . ',Alipay'; } \Log::error($sp8e7138 . ' Alipay.Api.verify failed'); return false; } } private function buildAliConfig($sp42f333) { return array('partner' => $sp42f333['partner'], 'seller_id' => $sp42f333['partner'], 'key' => $sp42f333['key'], 'sign_type' => 'MD5', 'input_charset' => 'utf-8', 'cacert' => __DIR__ . DIRECTORY_SEPARATOR . 'cacert.pem', 'transport' => 'https', 'payment_type' => '1', 'service' => 'create_direct_pay_by_user', 'anti_phishing_key' => '', 'exter_invoke_ip' => ''); } }