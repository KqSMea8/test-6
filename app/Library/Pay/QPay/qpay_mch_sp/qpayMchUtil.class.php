<?php
require_once 'qpayMch.config.php'; class QpayMchUtil { public static function createNoncestr($sp46bdd0 = 32) { $spa51e6e = 'abcdefghijklmnopqrstuvwxyz0123456789'; $spf2d586 = ''; for ($sp3deb2c = 0; $sp3deb2c < $sp46bdd0; $sp3deb2c++) { $spf2d586 .= substr($spa51e6e, mt_rand(0, strlen($spa51e6e) - 1), 1); } return $spf2d586; } public static function buildQueryStr($sp5e6808) { $sp27b441 = array(); foreach ($sp5e6808 as $sp467973 => $sp06d9c9) { if ($sp467973 != 'sign' && $sp06d9c9 != '' && !is_array($sp06d9c9)) { array_push($sp27b441, "{$sp467973}={$sp06d9c9}"); } } return implode('&', $sp27b441); } public static function getSign($sp5e6808, $sp2714fa) { ksort($sp5e6808); $spc13c69 = QpayMchUtil::buildQueryStr($sp5e6808); $spc13c69 = $spc13c69 . '&key=' . $sp2714fa; $spc13c69 = md5($spc13c69); $sp7b1c1e = strtoupper($spc13c69); return $sp7b1c1e; } public static function arrayToXml($sp563091) { $sp3e8e0b = '<xml>'; foreach ($sp563091 as $spb5c5a0 => $spe3999d) { if (is_numeric($spe3999d)) { $sp3e8e0b .= "<{$spb5c5a0}>{$spe3999d}</{$spb5c5a0}>"; } else { $sp3e8e0b .= "<{$spb5c5a0}><![CDATA[{$spe3999d}]]></{$spb5c5a0}>"; } } $sp3e8e0b .= '</xml>'; return $sp3e8e0b; } public static function xmlToArray($sp3e8e0b) { $sp563091 = json_decode(json_encode(simplexml_load_string($sp3e8e0b, 'SimpleXMLElement', LIBXML_NOCDATA)), true); return $sp563091; } public static function reqByCurlNormalPost($sp5e6808, $spaf19c1, $spbc7565 = 10) { return QpayMchUtil::_reqByCurl($sp5e6808, $spaf19c1, $spbc7565, false); } public static function reqByCurlSSLPost($sp5e6808, $spaf19c1, $spbc7565 = 10) { return QpayMchUtil::_reqByCurl($sp5e6808, $spaf19c1, $spbc7565, true); } private static function _reqByCurl($sp5e6808, $spaf19c1, $spbc7565 = 10, $spd707e0 = false) { $sp03f466 = curl_init(); curl_setopt($sp03f466, CURLOPT_URL, $spaf19c1); curl_setopt($sp03f466, CURLOPT_TIMEOUT, $spbc7565); curl_setopt($sp03f466, CURLOPT_SSL_VERIFYPEER, FALSE); curl_setopt($sp03f466, CURLOPT_SSL_VERIFYHOST, FALSE); curl_setopt($sp03f466, CURLOPT_HEADER, FALSE); curl_setopt($sp03f466, CURLOPT_RETURNTRANSFER, TRUE); if (isset($spd707e0) && $spd707e0 != false) { curl_setopt($sp03f466, CURLOPT_SSLCERTTYPE, 'PEM'); curl_setopt($sp03f466, CURLOPT_SSLCERT, QpayMchConf::CERT_FILE_PATH); curl_setopt($sp03f466, CURLOPT_SSLKEYTYPE, 'PEM'); curl_setopt($sp03f466, CURLOPT_SSLKEY, QpayMchConf::KEY_FILE_PATH); } curl_setopt($sp03f466, CURLOPT_POST, true); curl_setopt($sp03f466, CURLOPT_POSTFIELDS, $sp5e6808); $sp7210a9 = curl_exec($sp03f466); if ($sp7210a9) { curl_close($sp03f466); return $sp7210a9; } else { $sp178939 = curl_errno($sp03f466); print_r($sp178939); curl_close($sp03f466); return false; } } }