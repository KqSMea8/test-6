<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $sp2f63b0) { $spd92986 = $this->authQuery($sp2f63b0, \App\Product::class)->with(array('category' => function (Relation $spd92986) { $spd92986->select(array('id', 'name', 'password_open')); }))->with(array('cards' => function (Relation $spd92986) { $spd92986->whereRaw('`count_all`>`count_sold`')->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count`')->groupBy('product_id'); })); $sp11a77c = $sp2f63b0->post('search', false); $sp971b24 = $sp2f63b0->post('val', false); if ($sp11a77c && $sp971b24) { if ($sp11a77c == 'simple') { return Response::success($spd92986->where('category_id', $sp971b24)->get(array('id', 'name'))); } elseif ($sp11a77c == 'id') { $spd92986->where('id', $sp971b24); } else { $spd92986->where($sp11a77c, 'like', '%' . $sp971b24 . '%'); } } $sp97f886 = (int) $sp2f63b0->post('category_id'); if ($sp97f886 > 0) { $spd92986->where('category_id', $sp97f886); } $sp68b3e7 = $sp2f63b0->post('enabled'); if (strlen($sp68b3e7)) { $spd92986->whereIn('enabled', explode(',', $sp68b3e7)); } $sp5ea5e7 = $sp2f63b0->post('current_page', 1); $sp67decc = $sp2f63b0->post('per_page', 20); $sp176180 = $spd92986->orderBy('sort')->paginate($sp67decc, array('*'), 'page', $sp5ea5e7); foreach ($sp176180->items() as $spf667ee) { $spf667ee->setAppends(array('count', 'url')); } return Response::success($sp176180); } function sort(Request $sp2f63b0) { $spae6a5b = (int) $sp2f63b0->post('id', -1); if (!$spae6a5b) { return Response::forbidden(); } $spf667ee = $this->authQuery($sp2f63b0, \App\Product::class)->findOrFail($spae6a5b); $spf667ee->sort = (int) $sp2f63b0->post('sort', 1000); $spf667ee->save(); return Response::success(); } function category_edit(Request $sp2f63b0) { $spae6a5b = (int) $sp2f63b0->post('id'); $sp97f886 = (int) $sp2f63b0->post('category_id'); if (!$spae6a5b || !$sp97f886) { return Response::forbidden(); } $spf667ee = $this->authQuery($sp2f63b0, \App\Product::class)->findOrFail($spae6a5b); $spf667ee->category_id = $sp97f886; $spf667ee->save(); return Response::success(); } function edit(Request $sp2f63b0) { $spae6a5b = (int) $sp2f63b0->post('id'); $sp97f886 = (int) $sp2f63b0->post('category_id'); $spdbb9e7 = $sp2f63b0->post('name'); $spb87d3c = $sp2f63b0->post('description'); $sp09d831 = $sp2f63b0->post('instructions'); $spfb09a9 = $sp2f63b0->post('sort'); $spfb09a9 = $spfb09a9 === NULL ? 1000 : (int) $spfb09a9; $spa3f0bb = (int) $sp2f63b0->post('count_warn', 0); $sp945beb = (int) $sp2f63b0->post('buy_min', 0); $sp7ca550 = (int) $sp2f63b0->post('buy_max', 0); $sp946a11 = $sp2f63b0->post('support_coupon', 0) === 'true'; $sp4f77a3 = $sp2f63b0->post('password'); $spd10715 = $sp2f63b0->post('password_open', 0) === 'true'; $sp197757 = (int) ($sp2f63b0->post('cost') * 100); $sp56c01f = (int) ($sp2f63b0->post('price') * 100); $sp9b688e = $sp2f63b0->post('price_whole'); $sp68b3e7 = (int) $sp2f63b0->post('enabled'); if (System::_getInt('filter_words_open') === 1) { $sp62a480 = explode('|', System::_get('filter_words')); if (($sp7210a9 = Helper::filterWords($spdbb9e7, $sp62a480)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $sp7210a9); } if (($sp7210a9 = Helper::filterWords($spb87d3c, $sp62a480)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $sp7210a9); } if (($sp7210a9 = Helper::filterWords($sp09d831, $sp62a480)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $sp7210a9); } } if ($sp945beb < 1 || $sp945beb > 10000) { return Response::fail('最小购买量不能超过10000'); } if ($sp7ca550 < 1 || $sp7ca550 > 10000) { return Response::fail('最大购买量不能超过10000'); } if ($spa3f0bb < 0 || $spa3f0bb > 10000000) { return Response::fail('库存预警需要在0-10000000之间'); } if ($spfb09a9 < 0 || $spfb09a9 > 10000000) { return Response::fail('排序需要在0-10000000之间'); } if ($sp197757 > 1000000000 || $sp56c01f > 1000000000) { return Response::fail('商品价格不能超过10000000, 请重新输入'); } if ($sp197757 < 0 || $sp56c01f < 0) { return Response::fail('价格不能为负数'); } $spf667ee = $this->authQuery($sp2f63b0, \App\Product::class)->find($spae6a5b); if (!$spf667ee) { $spf667ee = new \App\Product(); $spf667ee->count_sold = 0; $spf667ee->user_id = $this->getUserIdOrFail($sp2f63b0); } else { if (\App\Card::whereProductId($spf667ee->id)->where('type', \App\Card::TYPE_REPEAT)->whereRaw('`count_all`>`count_sold`')->exists()) { if ($sp945beb !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最小购买量必须为1件'); } if ($sp7ca550 !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最大购买量必须为1件'); } } } $spf667ee->category_id = $sp97f886; $spf667ee->name = $spdbb9e7; $spe05123 = new AntiXSS(); $spf667ee->description = $spe05123->xss_clean($spb87d3c); $spf667ee->instructions = $spe05123->xss_clean($sp09d831); $spf667ee->sort = $spfb09a9; $spf667ee->buy_min = $sp945beb; $spf667ee->buy_max = $sp7ca550; $spf667ee->count_warn = $spa3f0bb; $spf667ee->support_coupon = $sp946a11; $spf667ee->password = $sp4f77a3; $spf667ee->password_open = $spd10715; $spf667ee->cost = $sp197757; $spf667ee->price = $sp56c01f; $spf667ee->price_whole = $sp9b688e; $spf667ee->enabled = $sp68b3e7; $spf667ee->saveOrFail(); return Response::success(); } function enable(Request $sp2f63b0) { $sp125d2b = $sp2f63b0->post('ids', ''); if (strlen($sp125d2b) < 1) { return Response::forbidden(); } $sp68b3e7 = (int) $sp2f63b0->post('enabled'); $this->authQuery($sp2f63b0, \App\Product::class)->whereIn('id', explode(',', $sp125d2b))->update(array('enabled' => $sp68b3e7)); return Response::success(); } function delete(Request $sp2f63b0) { $sp125d2b = $sp2f63b0->post('ids', ''); if (strlen($sp125d2b) < 1) { return Response::forbidden(); } $this->authQuery($sp2f63b0, \App\Product::class)->whereIn('id', explode(',', $sp125d2b))->delete(); return Response::success(); } }