<?php
namespace App\Http\Controllers\Shop; use App\Card; use App\Category; use App\Library\FundHelper; use App\Library\Helper; use App\Product; use App\Library\Response; use App\Library\Pay\Pay as PayApi; use App\Library\Geetest; use App\Mail\OrderShipped; use App\Mail\ProductCountWarn; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Cookie; class Pay extends Controller { public function __construct() { define('SYS_NAME', config('app.name')); define('SYS_URL', config('app.url')); define('SYS_URL_API', config('app.url_api')); } private $payApi = null; public function goPay($sp2f63b0, $spd58066, $spdbb3b3, $spc21a73, $spf0e814) { try { (new PayApi())->goPay($spc21a73, $spd58066, $spdbb3b3, $spdbb3b3, $spf0e814); return self::renderResult($sp2f63b0, array('success' => false, 'title' => '请稍后', 'msg' => '支付方式加载中，请稍后')); } catch (\Exception $spa9e936) { return self::renderResult($sp2f63b0, array('msg' => $spa9e936->getMessage())); } } function buy(Request $sp2f63b0) { $spb7cd9b = $sp2f63b0->input('customer'); if (strlen($spb7cd9b) !== 32) { return self::renderResult($sp2f63b0, array('msg' => '请求来源错误，请返回页面重新下单')); } if ((int) System::_get('vcode_shop_buy') === 1) { $sp7210a9 = Geetest\API::verify($sp2f63b0->input('geetest_challenge'), $sp2f63b0->input('geetest_validate'), $sp2f63b0->input('geetest_seccode')); if (!$sp7210a9) { return self::renderResult($sp2f63b0, array('msg' => '系统无法接受您的验证结果，请刷新页面后重试。')); } } $sp97f886 = (int) $sp2f63b0->input('category_id'); $sp18574f = (int) $sp2f63b0->input('product_id'); $sp761f2d = (int) $sp2f63b0->input('count'); $sp09ef00 = $sp2f63b0->input('coupon'); $spbe187f = $sp2f63b0->input('email'); $sp3cc850 = (int) $sp2f63b0->input('pay_id'); if (!$sp97f886 || !$sp18574f) { return self::renderResult($sp2f63b0, array('msg' => '请选择商品')); } if (strlen($spbe187f) < 1) { return self::renderResult($sp2f63b0, array('msg' => '请输入邮箱')); } $sp4366e7 = Category::findOrFail($sp97f886); if ($sp4366e7->password_open) { if ($sp4366e7->password !== $sp2f63b0->input('category_password')) { return Response::fail('分类密码输入错误'); } } $spf667ee = Product::where('id', $sp18574f)->where('category_id', $sp97f886)->where('enabled', 1)->with(array('cards' => function (Relation $spd92986) { $spd92986->whereRaw('`count_all`>`count_sold`')->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count`')->groupBy('product_id'); }))->first(); if ($spf667ee == null || $spf667ee->user == null) { return self::renderResult($sp2f63b0, array('msg' => '该商品未找到，请重新选择')); } if ($spf667ee->password_open) { if ($spf667ee->password !== $sp2f63b0->input('product_password')) { return Response::fail('分类密码输入错误'); } } if ($sp761f2d < $spf667ee->buy_min) { return self::renderResult($sp2f63b0, array('msg' => '该商品最少购买' . $spf667ee->buy_min . '件，请重新选择')); } if ($sp761f2d > $spf667ee->buy_max) { return self::renderResult($sp2f63b0, array('msg' => '该商品限购' . $spf667ee->buy_max . '件，请重新选择')); } $spf667ee->setAttribute('count', count($spf667ee->cards) ? $spf667ee->cards[0]->count : 0); if ($spf667ee->count < $sp761f2d) { return self::renderResult($sp2f63b0, array('msg' => '该商品库存不足')); } $sp468ee2 = \App\Pay::find($sp3cc850); if ($sp468ee2 == null || !$sp468ee2->enabled) { return self::renderResult($sp2f63b0, array('msg' => '支付方式未找到，请重新选择')); } $spd2a797 = $spf667ee->price; if ($spf667ee->price_whole) { $sp9b688e = json_decode($spf667ee->price_whole, true); for ($sp3deb2c = count($sp9b688e) - 1; $sp3deb2c >= 0; $sp3deb2c--) { if ($sp761f2d >= (int) $sp9b688e[$sp3deb2c][0]) { $spd2a797 = (int) $sp9b688e[$sp3deb2c][1]; break; } } } $sp56c01f = $sp761f2d * $spd2a797; $spf0e814 = $sp56c01f; $sp0b73e0 = null; if ($spf667ee->support_coupon && strlen($sp09ef00) > 0) { $sp0e8248 = \App\Coupon::where('user_id', $spf667ee->user_id)->where('coupon', $sp09ef00)->where('expire_at', '>', Carbon::now())->whereRaw('`count_used`<`count_all`')->get(); foreach ($sp0e8248 as $sp1d157c) { if ($sp1d157c->category_id === -1 || $sp1d157c->category_id === $sp97f886 && ($sp1d157c->product_id === -1 || $sp1d157c->product_id === $sp18574f)) { if ($sp1d157c->discount_type === \App\Coupon::DISCOUNT_TYPE_AMOUNT && $spf0e814 > $sp1d157c->discount_val) { $sp0b73e0 = $sp1d157c; $spf0e814 = $spf0e814 - $sp1d157c->discount_val; break; } if ($sp1d157c->discount_type === \App\Coupon::DISCOUNT_TYPE_PERCENT) { $sp0b73e0 = $sp1d157c; $spf0e814 = $spf0e814 - intval($spf0e814 * $sp1d157c->discount_val / 100); break; } } } } if ($sp0b73e0) { $sp0b73e0->status = \App\Coupon::STATUS_USED; $sp0b73e0->count_used++; $sp0b73e0->save(); } $sp7b1c38 = (int) round($spf0e814 * $sp468ee2->fee_system); $sp78b273 = $spf0e814 - $sp7b1c38; $spd58066 = date('YmdHis') . str_random(5); while (\App\Order::whereOrderNo($spd58066)->exists()) { $spd58066 = date('YmdHis') . str_random(5); } \App\Order::insert(array('user_id' => $spf667ee->user_id, 'order_no' => $spd58066, 'product_id' => $sp18574f, 'count' => $sp761f2d, 'email' => $spbe187f, 'ip' => Helper::getIP(), 'customer' => $spb7cd9b, 'email_sent' => false, 'cost' => $sp761f2d * $spf667ee->cost, 'price' => $sp56c01f, 'discount' => $sp56c01f - $spf0e814, 'paid' => $spf0e814, 'pay_id' => $sp468ee2->id, 'fee' => $sp7b1c38, 'system_fee' => $sp7b1c38, 'income' => $sp78b273, 'status' => \App\Order::STATUS_UNPAY, 'created_at' => Carbon::now())); $spdbb3b3 = $spd58066; return $this->goPay($sp2f63b0, $spd58066, $spdbb3b3, $sp468ee2, $spf0e814); } function pay(Request $sp2f63b0, $spd58066) { $sp871a53 = \App\Order::whereOrderNo($spd58066)->first(); if ($sp871a53 == null) { return self::renderResult($sp2f63b0, array('msg' => '订单未找到，请重试')); } if ($sp871a53->status !== \App\Order::STATUS_UNPAY) { return redirect('/pay/result/' . $spd58066); } $sp8e7138 = 'pay: ' . $sp871a53->pay_id; $spc21a73 = $sp871a53->pay; if (!$spc21a73) { \Log::error($sp8e7138 . ' cannot find Pay'); return $this->renderResult($sp2f63b0, array('msg' => '支付方式未找到')); } $sp8e7138 .= ',' . $spc21a73->driver; $sp42f333 = json_decode($spc21a73->config, true); $sp42f333['payway'] = $spc21a73->way; $sp42f333['out_trade_no'] = $spd58066; try { $this->payApi = PayApi::getDriver($spc21a73->id, $spc21a73->driver); } catch (\Exception $spa9e936) { \Log::error($sp8e7138 . ' cannot find Driver: ' . $spa9e936->getMessage()); return $this->renderResult($sp2f63b0, array('msg' => '支付驱动未找到')); } if ($this->payApi->verify($sp42f333, function ($spd58066, $spda7912, $sp649e9d) use($sp2f63b0) { try { $this->shipOrder($sp2f63b0, $spd58066, $spda7912, $sp649e9d, FALSE); } catch (\Exception $spa9e936) { $this->renderResult($sp2f63b0, array('success' => false, 'msg' => $spa9e936->getMessage())); } })) { \Log::notice($sp8e7138 . ' already success' . '

'); return redirect('/pay/result/' . $spd58066); } $spf667ee = Product::where('id', $sp871a53->product_id)->where('enabled', 1)->with(array('cards' => function (Relation $spd92986) { $spd92986->whereRaw('`count_all`>`count_sold`')->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count`')->groupBy('product_id'); }))->first(); if ($spf667ee == null) { return self::renderResult($sp2f63b0, array('msg' => '该商品已下架')); } $spf667ee->setAttribute('count', count($spf667ee->cards) ? $spf667ee->cards[0]->count : 0); if ($spf667ee->count < $sp871a53->count) { return self::renderResult($sp2f63b0, array('msg' => '该商品库存不足')); } $spdbb3b3 = $spd58066; return $this->goPay($sp2f63b0, $spd58066, $spdbb3b3, $spc21a73, $sp871a53->paid); } function qrcode(Request $sp2f63b0, $spd58066, $sp846434) { $sp871a53 = \App\Order::whereOrderNo($spd58066)->with('product')->first(); if ($sp871a53 == null) { return self::renderResult($sp2f63b0, array('msg' => '订单未找到，请重试')); } if ($sp871a53->product_id !== \App\Product::ID_API && $sp871a53->product == null) { return self::renderResult($sp2f63b0, array('msg' => '商品未找到，请重试')); } return view('pay/' . $sp846434, array('pay_id' => $sp871a53->pay_id, 'name' => $sp871a53->product_id === \App\Product::ID_API ? $sp871a53->api_out_no : $sp871a53->product->name . ' x ' . $sp871a53->count . '件', 'amount' => $sp871a53->paid, 'qrcode' => $sp2f63b0->get('url'), 'id' => $spd58066)); } function qrQuery(Request $sp2f63b0, $sp3cc850) { $sp321402 = $sp2f63b0->input('id', ''); return self::payReturn($sp2f63b0, $sp3cc850, $sp321402); } function payReturn(Request $sp2f63b0, $sp3cc850, $sp79d97c = '') { $sp8e7138 = 'payReturn: ' . $sp3cc850; \Log::debug($sp8e7138); $spc21a73 = \App\Pay::where('id', $sp3cc850)->first(); if (!$spc21a73) { return $this->renderResult($sp2f63b0, array('success' => 0, 'msg' => '支付方式错误')); } $sp8e7138 .= ',' . $spc21a73->driver; if (strlen($sp79d97c) > 0) { $sp871a53 = \App\Order::whereOrderNo($sp79d97c)->first(); if ($sp871a53 && ($sp871a53->status === \App\Order::STATUS_PAID || $sp871a53->status === \App\Order::STATUS_SUCCESS)) { \Log::notice($sp8e7138 . ' already success' . '

'); if ($sp2f63b0->ajax()) { return self::renderResult($sp2f63b0, array('success' => 1, 'data' => '/pay/result/' . $sp79d97c), array('order' => $sp871a53)); } else { return redirect('/pay/result/' . $sp79d97c); } } } try { $this->payApi = PayApi::getDriver($spc21a73->id, $spc21a73->driver); } catch (\Exception $spa9e936) { \Log::error($sp8e7138 . ' cannot find Driver: ' . $spa9e936->getMessage()); return $this->renderResult($sp2f63b0, array('success' => 0, 'msg' => '支付驱动未找到')); } $sp42f333 = json_decode($spc21a73->config, true); $sp42f333['out_trade_no'] = $sp79d97c; $sp42f333['payway'] = $spc21a73->way; \Log::debug($sp8e7138 . ' will verify'); if ($this->payApi->verify($sp42f333, function ($spd58066, $spda7912, $sp649e9d) use($sp2f63b0, $sp8e7138, &$sp79d97c) { $sp79d97c = $spd58066; try { \Log::debug($sp8e7138 . " shipOrder start, order_no: {$spd58066}, amount: {$spda7912}, trade_no: {$sp649e9d}"); $this->shipOrder($sp2f63b0, $spd58066, $spda7912, $sp649e9d, FALSE); \Log::debug($sp8e7138 . ' shipOrder end, order_no: ' . $spd58066); } catch (\Exception $spa9e936) { \Log::error($sp8e7138 . ' shipOrder Exception: ' . $spa9e936->getMessage()); } })) { \Log::debug($sp8e7138 . ' verify finished: 1' . '

'); if ($sp2f63b0->ajax()) { return self::renderResult($sp2f63b0, array('success' => 1, 'data' => '/pay/result/' . $sp79d97c)); } else { return redirect('/pay/result/' . $sp79d97c); } } else { \Log::debug($sp8e7138 . ' verify finished: 0' . '

'); return $this->renderResult($sp2f63b0, array('success' => 0, 'msg' => '支付验证失败，您可以稍后查看支付状态。')); } } function payNotify(Request $sp2f63b0, $sp3cc850) { $sp8e7138 = 'payNotify pay_id: ' . $sp3cc850; \Log::debug($sp8e7138); $spc21a73 = \App\Pay::where('id', $sp3cc850)->first(); if (!$spc21a73) { \Log::error($sp8e7138 . ' cannot find PayModel'); echo 'fail'; die; } $sp8e7138 .= ',' . $spc21a73->driver; try { $this->payApi = PayApi::getDriver($spc21a73->id, $spc21a73->driver); } catch (\Exception $spa9e936) { \Log::error($sp8e7138 . ' cannot find Driver: ' . $spa9e936->getMessage()); echo 'fail'; die; } $sp42f333 = json_decode($spc21a73->config, true); $sp42f333['payway'] = $spc21a73->way; $sp42f333['isNotify'] = true; \Log::debug($sp8e7138 . ' will verify'); $sp7210a9 = $this->payApi->verify($sp42f333, function ($spd58066, $spda7912, $sp649e9d) use($sp2f63b0, $sp8e7138) { try { \Log::debug($sp8e7138 . " shipOrder start, order_no: {$spd58066}, amount: {$spda7912}, trade_no: {$sp649e9d}"); $this->shipOrder($sp2f63b0, $spd58066, $spda7912, $sp649e9d, FALSE); \Log::debug($sp8e7138 . ' shipOrder end, order_no: ' . $spd58066); } catch (\Exception $spa9e936) { \Log::error($sp8e7138 . ' shipOrder Exception: ' . $spa9e936->getMessage()); } }); \Log::debug($sp8e7138 . ' notify finished: ' . (int) $sp7210a9 . '

'); die; } function result(Request $sp2f63b0, $spd58066) { $sp871a53 = \App\Order::whereOrderNo($spd58066)->first(); if ($sp871a53 == null) { return self::renderResult($sp2f63b0, array('msg' => '订单未找到，请重试')); } if ($sp871a53->status === \App\Order::STATUS_PAID) { $spdac7bf = $sp871a53->user->qq; $sp32b59e = '商家库存不足，因此卡密没有自动发货，请联系商家客服发货'; if ($spdac7bf) { $sp32b59e .= '<br><a href="http://wpa.qq.com/msgrd?v=3&uin=' . $spdac7bf . '&site=qq&menu=yes" target="_blank">商家客服QQ:' . $spdac7bf . '</a>'; } return self::renderResult($sp2f63b0, array('success' => false, 'title' => '订单已支付', 'msg' => $sp32b59e), array('order' => $sp871a53)); } elseif ($sp871a53->status === \App\Order::STATUS_SUCCESS) { return $this->shipOrder($sp2f63b0, $sp871a53->order_no, $sp871a53->paid, 0, TRUE); } return self::renderResult($sp2f63b0, array('success' => false, 'msg' => $sp871a53->remark ? '失败原因:<br>' . $sp871a53->remark : '订单支付失败，请重试'), array('order' => $sp871a53)); } function renderResult(Request $sp2f63b0, $sp594fbb, $sp89fd19 = array()) { if ($sp2f63b0->ajax()) { if (@$sp594fbb['success']) { return Response::success($sp594fbb['data']); } else { return Response::fail('error', $sp594fbb['msg']); } } else { return view('pay.result', array_merge(array('result' => $sp594fbb, 'data' => $sp89fd19), $sp89fd19)); } } function shipOrder($sp2f63b0, $spd58066, $spda7912, $sp649e9d, $sp8ebf51 = true) { $sp871a53 = \App\Order::whereOrderNo($spd58066)->first(); if ($sp871a53 === null) { \Log::error('shipOrder: No query results for model [App\\Order:' . $spd58066 . ',trade_no:' . $sp649e9d . ',amount:' . $spda7912 . ']. die(\'success\');'); die('success'); } if ($sp871a53->paid > $spda7912) { \Log::alert('shipOrder, price may error, order_no:' . $spd58066 . ', paid:' . $sp871a53->paid . ', $amount get:' . $spda7912); $sp871a53->remark = '支付金额(' . sprintf('%0.2f', $spda7912 / 100) . ') 小于 订单金额(' . sprintf('%0.2f', $sp871a53->paid / 100) . ')'; $sp871a53->save(); throw new \Exception($sp871a53->remark); } $spddebb7 = array(); $spfe9442 = '订单#' . $spd58066 . '&nbsp;已支付，卡号列表：'; $spa6ee3c = ''; $spf667ee = null; $sp54ab99 = $sp871a53->status === \App\Order::STATUS_UNPAY; $sp51c97c = $sp54ab99 && System::_getInt('mail_send_order') === 1 && filter_var($sp871a53->email, FILTER_VALIDATE_EMAIL); if ($sp54ab99) { \Log::debug('shipOrder.first_process:' . $spd58066); $sp8598d3 = $sp871a53->id; if (FundHelper::orderSuccess($sp871a53, function () use($sp8598d3, $sp649e9d, &$spddebb7, &$spa6ee3c) { $sp871a53 = \App\Order::where('id', $sp8598d3)->lockForUpdate()->firstOrFail(); if ($sp871a53->status !== \App\Order::STATUS_UNPAY) { \Log::debug('shipOrder.first_process:' . $sp871a53->order_no . ' already processed!'); return -999; } $spf667ee = $sp871a53->product()->lockForUpdate()->firstOrFail(); $spf667ee->count_sold += $sp871a53->count; $spf667ee->saveOrFail(); $sp871a53->pay_trade_no = $sp649e9d; $sp871a53->paid_at = Carbon::now(); $spddebb7 = Card::where('product_id', $sp871a53->product_id)->whereRaw('`count_sold`<`count_all`')->take($sp871a53->count)->lockForUpdate()->get(); if (count($spddebb7) !== $sp871a53->count) { \Log::alert('订单:' . $sp871a53->order_no . ', 购买数量:' . $sp871a53->count . ', 卡数量:' . count($spddebb7) . ' 卡密不足(已支付 未发货)'); $sp871a53->status = \App\Order::STATUS_PAID; $sp871a53->saveOrFail(); return \App\Order::STATUS_PAID; } else { $sp871a53->status = \App\Order::STATUS_SUCCESS; $sp871a53->saveOrFail(); $sp40e013 = array(); foreach ($spddebb7 as $sp32a040) { $spa6ee3c .= $sp32a040->card . '<br>'; $sp40e013[] = $sp32a040->id; } $sp871a53->cards()->attach($sp40e013); Card::whereIn('id', $sp40e013)->update(array('status' => Card::STATUS_SOLD, 'count_sold' => \DB::raw('`count_sold`+1'))); return \App\Order::STATUS_SUCCESS; } })) { $spf667ee = Product::where('id', $sp871a53->product_id)->with(array('cards' => function (Relation $spd92986) { $spd92986->whereRaw('`count_all`>`count_sold`')->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count`')->groupBy('product_id'); }))->first(); if ($spf667ee) { $sp761f2d = count($spf667ee->cards) ? $spf667ee->cards[0]->count : 0; $spf667ee->setAttribute('count', $sp761f2d); if ($spf667ee->count_warn > 0 && $sp761f2d < $spf667ee->count_warn) { try { \Mail::to($sp871a53->user->email)->Queue(new ProductCountWarn($spf667ee, $sp761f2d)); } catch (\Exception $spa9e936) { \App\Library\LogHelper::setLogFile('mail'); \Log::error('shipOrder.count_warn error, product_id:' . $sp871a53->product_id . ', email:' . $sp871a53->user->email . ', Exception:' . $spa9e936); \App\Library\LogHelper::setLogFile('card'); } } } } else { \Log::error('shipOrder.first_process error, order_no:' . $spd58066 . ',trade_no:' . $sp649e9d); throw new \Exception('merchant operate exception!'); } } elseif ($sp8ebf51) { $spddebb7 = $sp871a53->cards; $spf667ee = $sp871a53->product; foreach ($spddebb7 as $sp32a040) { $spa6ee3c .= $sp32a040->card . '
'; } } if ($sp8ebf51 || $sp51c97c) { if (count($spddebb7) < $sp871a53->count) { if (count($spddebb7)) { $spfe9442 = '目前库存不足，您还有' . ($sp871a53->count - count($spddebb7)) . '张卡密未发货，请联系商家客服发货<br>已发货卡密见下方：<br>'; } else { $spfe9442 = '目前库存不足，您购买的' . ($sp871a53->count - count($spddebb7)) . '张卡密未发货，请联系商家客服发货<br>'; } $spdac7bf = $sp871a53->user->qq; if ($spdac7bf) { $spfe9442 .= '<a href="http://wpa.qq.com/msgrd?v=3&uin=' . $spdac7bf . '&site=qq&menu=yes" target="_blank">商家客服QQ:' . $spdac7bf . '</a><br>'; } } } if ($sp51c97c) { $spd5f824 = str_replace('
', '<br>', $spa6ee3c); try { \Mail::to($sp871a53->email)->Queue(new OrderShipped($sp871a53, $spfe9442, $spd5f824)); $sp871a53->email_sent = true; $sp871a53->saveOrFail(); } catch (\Exception $spa9e936) { \App\Library\LogHelper::setLogFile('mail'); \Log::error('shipOrder.need_mail error, order_no:' . $spd58066 . ', email:' . $sp871a53->email . ', cards:' . $spd5f824 . ', Exception:' . $spa9e936->getMessage()); \App\Library\LogHelper::setLogFile('card'); } } if ($sp8ebf51) { return self::renderResult($sp2f63b0, array('success' => true, 'msg' => $spfe9442), array('card_txt' => $spa6ee3c, 'order' => $sp871a53, 'product' => $spf667ee)); } return FALSE; } }