<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { function stat(Request $sp2f63b0) { $spbaca1e = (int) $sp2f63b0->input('day', 7); $sp521547 = $sp2f63b0->post('profit') === 'true'; $spd92986 = \App\Order::where(function ($spd92986) { $spd92986->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', Helper::getMysqlDate(-$spbaca1e + 1))->groupBy('date')->orderBy('date', 'DESC'); if ($sp521547) { $spd92986->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`fee`-`system_fee`) as "sum"'); } else { $spd92986->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "sum"'); } $sp176180 = $spd92986->get()->toArray(); $sp7210a9 = array(); foreach ($sp176180 as $sp795ea1) { $sp7210a9[$sp795ea1['date']] = array((int) $sp795ea1['count'], (int) $sp795ea1['sum']); } return Response::success($sp7210a9); } public function delete(Request $sp2f63b0) { $sp125d2b = $sp2f63b0->post('ids', ''); $spe7ca46 = (int) $sp2f63b0->post('income'); $sp486daa = (int) $sp2f63b0->post('balance'); if (strlen($sp125d2b) < 1) { return Response::forbidden(); } \App\Order::whereIn('id', explode(',', $sp125d2b))->chunk(100, function ($spab4dca) use($spe7ca46, $sp486daa) { foreach ($spab4dca as $sp871a53) { $sp871a53->cards()->detach(); try { if ($spe7ca46) { $sp871a53->fundRecord()->delete(); } if ($sp486daa) { $sp47ffde = \App\User::lockForUpdate()->firstOrFail(); $sp47ffde->m_all -= $sp871a53->income; $sp47ffde->saveOrFail(); } $sp871a53->delete(); } catch (\Exception $spa9e936) { } } }); return Response::success(); } function freeze(Request $sp2f63b0) { $sp125d2b = $sp2f63b0->post('ids', ''); if (strlen($sp125d2b) < 1) { return Response::forbidden(); } $spa0561d = $sp2f63b0->post('reason'); $spab4dca = \App\Order::whereIn('id', explode(',', $sp125d2b))->where('status', \App\Order::STATUS_SUCCESS)->get(); $sp761f2d = 0; $spa0d42d = 0; foreach ($spab4dca as $sp871a53) { if (FundHelper::orderFreeze($sp871a53, $spa0561d)) { $spa0d42d++; } $sp761f2d++; } return Response::success(array($sp761f2d, $spa0d42d)); } function unfreeze(Request $sp2f63b0) { $sp125d2b = $sp2f63b0->post('ids', ''); if (strlen($sp125d2b) < 1) { return Response::forbidden(); } $spab4dca = \App\Order::whereIn('id', explode(',', $sp125d2b))->where('status', \App\Order::STATUS_FROZEN)->get(); $sp761f2d = 0; $spa0d42d = 0; $spa50644 = \App\Order::STATUS_FROZEN; foreach ($spab4dca as $sp871a53) { if (FundHelper::orderUnfreeze($sp871a53, '后台操作', null, $spa50644)) { $spa0d42d++; } $sp761f2d++; } return Response::success(array($sp761f2d, $spa0d42d, $spa50644)); } function set_paid(Request $sp2f63b0) { $spae6a5b = (int) $sp2f63b0->post('id', ''); if ($spae6a5b < 1) { return Response::forbidden(); } $sp649e9d = $sp2f63b0->post('trade_no', ''); if (strlen($sp649e9d) < 1) { return Response::forbidden('请输入支付系统内单号'); } $sp871a53 = \App\Order::findOrFail($spae6a5b); if ($sp871a53->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $sp8e7138 = 'Admin.SetPaid'; $spd58066 = $sp871a53->order_no; $spda7912 = $sp871a53->paid; try { Log::debug($sp8e7138 . " shipOrder start, order_no: {$spd58066}, amount: {$spda7912}, trade_no: {$sp649e9d}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($sp2f63b0, $spd58066, $spda7912, $sp649e9d, FALSE); Log::debug($sp8e7138 . ' shipOrder end, order_no: ' . $spd58066); $spa0d42d = true; $sp32b59e = '发货成功'; } catch (\Exception $spa9e936) { $spa0d42d = false; $sp32b59e = $spa9e936->getMessage(); Log::error($sp8e7138 . ' shipOrder Exception: ' . $spa9e936->getMessage()); } $sp871a53 = \App\Order::with(array('card_orders.card' => function (Relation $spd92986) { $spd92986->select(array('id', 'card')); }))->findOrFail($spae6a5b); if ($sp871a53->status === \App\Order::STATUS_PAID) { $spa0d42d = false; $sp32b59e = '已标记为付款成功, 但是买家库存不足, 发货失败, 请稍后尝试手动发货'; } return Response::success(array('code' => $spa0d42d ? 0 : -1, 'msg' => $sp32b59e, 'order' => $sp871a53)); } }